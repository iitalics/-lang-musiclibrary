#lang racket
(provide
 #%module-begin
 (all-from-out racket)
 (all-from-out musiclibrary))

(require
 musiclibrary
 "./private/entry-point.rkt"
 syntax/wrap-modbeg
 (for-syntax
  racket/base
  syntax/parse))

;; ---------------------------------------------------------------------------------------

; if this identifier appears at the start of a module (in particular, a submodule
; generated by (finish ..)), then don't actually wrap the module
(define-syntax #%prevent-module-begin-expansion #f)

;; module-begin wrapper for #lang musiclibrary
(define-syntax #%module-begin
  (syntax-parser
    [(_ {~literal #%prevent-module-begin-expansion} . r)
     #'(#%plain-module-begin . r)]

    [modbeg
     #:with (_ tl ...) ((make-wrapping-module-begin #'(pick-out-album o)) #'modbeg)
     #'(#%plain-module-begin
        (define o (box '()))
        tl ...
        (define the-library (reverse (unbox o)))

        (module+ main
          #%prevent-module-begin-expansion
          (cli-main the-library))

        (module+ music
          #%prevent-module-begin-expansion
          (provide (rename-out [the-library library]))))]))

(define ((pick-out-album out-library) top-v)
  (define maybe-album
    (cond
      [(void? top-v) #f]
      [(track? top-v) (album/single top-v)]
      [(album? top-v) top-v]
      [else (error 'musiclibrary
                   (~a "invalid toplevel expression.\n"
                       "  expected: (or/c track? album? void?)\n"
                       "  got: " top-v))]))

  (when maybe-album
    (set-box! out-library (cons maybe-album (unbox out-library)))))
